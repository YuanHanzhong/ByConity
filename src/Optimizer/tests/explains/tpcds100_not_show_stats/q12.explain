Projection
│     Expressions: [i_category, i_class, i_current_price, i_item_desc, i_item_id], itemrevenue:=`expr#sum(ws_ext_sales_price)`, revenueratio:=`expr#divide(multiply(sum(ws_ext_sales_price), 100), sum(sum(ws_ext_sales_price)) OVER (PARTITION BY i_class))`
└─ Limit
   │     Limit: 100
   └─ Sorting
      │     Order by: {i_category asc, i_class asc, i_item_id asc, i_item_desc asc, expr#divide(multiply(sum(ws_ext_sales_price), 100), sum(sum(ws_ext_sales_price)) OVER (PARTITION BY i_class)) asc}
      │     Limit: 100
      └─ Gather Exchange
         └─ Sorting
            │     Order by: {i_category asc, i_class asc, i_item_id asc, i_item_desc asc, expr#divide(multiply(sum(ws_ext_sales_price), 100), sum(sum(ws_ext_sales_price)) OVER (PARTITION BY i_class)) asc}
            │     Limit: 100
            └─ Projection
               │     Expressions: [expr#sum(ws_ext_sales_price), i_category, i_class, i_current_price, i_item_desc, i_item_id], expr#divide(multiply(sum(ws_ext_sales_price), 100), sum(sum(ws_ext_sales_price)) OVER (PARTITION BY i_class)):=(`expr#sum(ws_ext_sales_price)` * 100) / `expr#sum(sum(ws_ext_sales_price)) OVER (PARTITION BY i_class)`
               └─ Window
                  └─ Repartition Exchange
                     │     Partition by: {i_class}
                     └─ MergingAggregated
                        └─ Repartition Exchange
                           │     Partition by: {i_item_id, i_item_desc, i_category, i_class, i_current_price}
                           └─ Aggregating
                              │     Group by: {i_item_id, i_item_desc, i_category, i_class, i_current_price}
                              │     Aggregates: expr#sum(ws_ext_sales_price):=AggNull(sum)(ws_ext_sales_price)
                              └─ Inner Join
                                 │     Condition: ws_item_sk == i_item_sk
                                 │     Runtime Filters Builder: {i_item_sk}
                                 ├─ Repartition Exchange
                                 │  │     Partition by: {ws_item_sk}
                                 │  └─ Inner Join
                                 │     │     Condition: ws_sold_date_sk == d_date_sk
                                 │     │     Runtime Filters Builder: {d_date_sk}
                                 │     ├─ Filter
                                 │     │  │     Condition: Runtime Filters: {ws_item_sk, ws_sold_date_sk}
                                 │     │  └─ TableScan tpcds100.web_sales
                                 │     │           Where: Runtime Filters: {ws_item_sk, ws_sold_date_sk}
                                 │     │           Outputs: [ws_sold_date_sk, ws_item_sk, ws_ext_sales_price]
                                 │     └─ Broadcast Exchange
                                 │        └─ Filter
                                 │           │     Condition: (d_date >= cast(10644, 'Date')) AND (d_date <= cast(10674, 'Date'))
                                 │           └─ TableScan tpcds100.date_dim
                                 │                    Where: (d_date >= cast(10644, 'Date')) AND (d_date <= cast(10674, 'Date'))
                                 │                    Outputs: [d_date_sk, d_date]
                                 └─ Repartition Exchange
                                    │     Partition by: {i_item_sk}
                                    └─ Filter
                                       │     Condition: i_category IN ('Books', 'Home', 'Sports')
                                       └─ TableScan tpcds100.item
                                                Where: i_category IN ('Books', 'Home', 'Sports')
                                                Outputs: [i_item_sk, i_item_id, i_item_desc, i_current_price, i_class, i_category]
note: Runtime Filter is applied for 2 times.
